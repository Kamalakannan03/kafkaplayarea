/**
 * Autogenerated by Avro
 *
 * DO NOT EDIT DIRECTLY
 */
package com.mycorp.mynamespace;

import org.apache.avro.specific.SpecificData;
import org.apache.avro.message.BinaryMessageEncoder;
import org.apache.avro.message.BinaryMessageDecoder;
import org.apache.avro.message.SchemaStore;

@SuppressWarnings("all")
/** Sample schema to help you get started. */
@org.apache.avro.specific.AvroGenerated
public class sampleRecord extends org.apache.avro.specific.SpecificRecordBase implements org.apache.avro.specific.SpecificRecord {
  private static final long serialVersionUID = -6297926503345786555L;
  public static final org.apache.avro.Schema SCHEMA$ = new org.apache.avro.Schema.Parser().parse("{\"type\":\"record\",\"name\":\"sampleRecord\",\"namespace\":\"com.mycorp.mynamespace\",\"doc\":\"Sample schema to help you get started.\",\"fields\":[{\"name\":\"orderId\",\"type\":\"int\",\"doc\":\"The id of the order.\"},{\"name\":\"orderTimeAndDate\",\"type\":\"int\",\"doc\":\"Timestamp of the order.\"},{\"name\":\"orderAddress\",\"type\":\"string\",\"doc\":\"The address of the order.\"},{\"name\":\"orderDetails\",\"type\":\"string\",\"doc\":\"The Description of the order.\",\"default\":\"\"},{\"name\":\"order\",\"type\":\"string\",\"doc\":\"The order.\",\"default\":\"\"},{\"name\":\"finalString\",\"type\":\"string\",\"doc\":\"The final\",\"default\":\"\"}]}");
  public static org.apache.avro.Schema getClassSchema() { return SCHEMA$; }

  private static SpecificData MODEL$ = new SpecificData();

  private static final BinaryMessageEncoder<sampleRecord> ENCODER =
      new BinaryMessageEncoder<sampleRecord>(MODEL$, SCHEMA$);

  private static final BinaryMessageDecoder<sampleRecord> DECODER =
      new BinaryMessageDecoder<sampleRecord>(MODEL$, SCHEMA$);

  /**
   * Return the BinaryMessageDecoder instance used by this class.
   */
  public static BinaryMessageDecoder<sampleRecord> getDecoder() {
    return DECODER;
  }

  /**
   * Create a new BinaryMessageDecoder instance for this class that uses the specified {@link SchemaStore}.
   * @param resolver a {@link SchemaStore} used to find schemas by fingerprint
   */
  public static BinaryMessageDecoder<sampleRecord> createDecoder(SchemaStore resolver) {
    return new BinaryMessageDecoder<sampleRecord>(MODEL$, SCHEMA$, resolver);
  }

  /** Serializes this sampleRecord to a ByteBuffer. */
  public java.nio.ByteBuffer toByteBuffer() throws java.io.IOException {
    return ENCODER.encode(this);
  }

  /** Deserializes a sampleRecord from a ByteBuffer. */
  public static sampleRecord fromByteBuffer(
      java.nio.ByteBuffer b) throws java.io.IOException {
    return DECODER.decode(b);
  }

  /** The id of the order. */
  @Deprecated public int orderId;
  /** Timestamp of the order. */
  @Deprecated public int orderTimeAndDate;
  /** The address of the order. */
  @Deprecated public java.lang.CharSequence orderAddress;
  /** The Description of the order. */
  @Deprecated public java.lang.CharSequence orderDetails;
  /** The order. */
  @Deprecated public java.lang.CharSequence order;
  /** The final */
  @Deprecated public java.lang.CharSequence finalString;

  /**
   * Default constructor.  Note that this does not initialize fields
   * to their default values from the schema.  If that is desired then
   * one should use <code>newBuilder()</code>.
   */
  public sampleRecord() {}

  /**
   * All-args constructor.
   * @param orderId The id of the order.
   * @param orderTimeAndDate Timestamp of the order.
   * @param orderAddress The address of the order.
   * @param orderDetails The Description of the order.
   * @param order The order.
   * @param finalString The final
   */
  public sampleRecord(java.lang.Integer orderId, java.lang.Integer orderTimeAndDate, java.lang.CharSequence orderAddress, java.lang.CharSequence orderDetails, java.lang.CharSequence order, java.lang.CharSequence finalString) {
    this.orderId = orderId;
    this.orderTimeAndDate = orderTimeAndDate;
    this.orderAddress = orderAddress;
    this.orderDetails = orderDetails;
    this.order = order;
    this.finalString = finalString;
  }

  public org.apache.avro.Schema getSchema() { return SCHEMA$; }
  // Used by DatumWriter.  Applications should not call.
  public java.lang.Object get(int field$) {
    switch (field$) {
    case 0: return orderId;
    case 1: return orderTimeAndDate;
    case 2: return orderAddress;
    case 3: return orderDetails;
    case 4: return order;
    case 5: return finalString;
    default: throw new org.apache.avro.AvroRuntimeException("Bad index");
    }
  }

  // Used by DatumReader.  Applications should not call.
  @SuppressWarnings(value="unchecked")
  public void put(int field$, java.lang.Object value$) {
    switch (field$) {
    case 0: orderId = (java.lang.Integer)value$; break;
    case 1: orderTimeAndDate = (java.lang.Integer)value$; break;
    case 2: orderAddress = (java.lang.CharSequence)value$; break;
    case 3: orderDetails = (java.lang.CharSequence)value$; break;
    case 4: order = (java.lang.CharSequence)value$; break;
    case 5: finalString = (java.lang.CharSequence)value$; break;
    default: throw new org.apache.avro.AvroRuntimeException("Bad index");
    }
  }

  /**
   * Gets the value of the 'orderId' field.
   * @return The id of the order.
   */
  public java.lang.Integer getOrderId() {
    return orderId;
  }

  /**
   * Sets the value of the 'orderId' field.
   * The id of the order.
   * @param value the value to set.
   */
  public void setOrderId(java.lang.Integer value) {
    this.orderId = value;
  }

  /**
   * Gets the value of the 'orderTimeAndDate' field.
   * @return Timestamp of the order.
   */
  public java.lang.Integer getOrderTimeAndDate() {
    return orderTimeAndDate;
  }

  /**
   * Sets the value of the 'orderTimeAndDate' field.
   * Timestamp of the order.
   * @param value the value to set.
   */
  public void setOrderTimeAndDate(java.lang.Integer value) {
    this.orderTimeAndDate = value;
  }

  /**
   * Gets the value of the 'orderAddress' field.
   * @return The address of the order.
   */
  public java.lang.CharSequence getOrderAddress() {
    return orderAddress;
  }

  /**
   * Sets the value of the 'orderAddress' field.
   * The address of the order.
   * @param value the value to set.
   */
  public void setOrderAddress(java.lang.CharSequence value) {
    this.orderAddress = value;
  }

  /**
   * Gets the value of the 'orderDetails' field.
   * @return The Description of the order.
   */
  public java.lang.CharSequence getOrderDetails() {
    return orderDetails;
  }

  /**
   * Sets the value of the 'orderDetails' field.
   * The Description of the order.
   * @param value the value to set.
   */
  public void setOrderDetails(java.lang.CharSequence value) {
    this.orderDetails = value;
  }

  /**
   * Gets the value of the 'order' field.
   * @return The order.
   */
  public java.lang.CharSequence getOrder() {
    return order;
  }

  /**
   * Sets the value of the 'order' field.
   * The order.
   * @param value the value to set.
   */
  public void setOrder(java.lang.CharSequence value) {
    this.order = value;
  }

  /**
   * Gets the value of the 'finalString' field.
   * @return The final
   */
  public java.lang.CharSequence getFinalString() {
    return finalString;
  }

  /**
   * Sets the value of the 'finalString' field.
   * The final
   * @param value the value to set.
   */
  public void setFinalString(java.lang.CharSequence value) {
    this.finalString = value;
  }

  /**
   * Creates a new sampleRecord RecordBuilder.
   * @return A new sampleRecord RecordBuilder
   */
  public static com.mycorp.mynamespace.sampleRecord.Builder newBuilder() {
    return new com.mycorp.mynamespace.sampleRecord.Builder();
  }

  /**
   * Creates a new sampleRecord RecordBuilder by copying an existing Builder.
   * @param other The existing builder to copy.
   * @return A new sampleRecord RecordBuilder
   */
  public static com.mycorp.mynamespace.sampleRecord.Builder newBuilder(com.mycorp.mynamespace.sampleRecord.Builder other) {
    return new com.mycorp.mynamespace.sampleRecord.Builder(other);
  }

  /**
   * Creates a new sampleRecord RecordBuilder by copying an existing sampleRecord instance.
   * @param other The existing instance to copy.
   * @return A new sampleRecord RecordBuilder
   */
  public static com.mycorp.mynamespace.sampleRecord.Builder newBuilder(com.mycorp.mynamespace.sampleRecord other) {
    return new com.mycorp.mynamespace.sampleRecord.Builder(other);
  }

  /**
   * RecordBuilder for sampleRecord instances.
   */
  public static class Builder extends org.apache.avro.specific.SpecificRecordBuilderBase<sampleRecord>
    implements org.apache.avro.data.RecordBuilder<sampleRecord> {

    /** The id of the order. */
    private int orderId;
    /** Timestamp of the order. */
    private int orderTimeAndDate;
    /** The address of the order. */
    private java.lang.CharSequence orderAddress;
    /** The Description of the order. */
    private java.lang.CharSequence orderDetails;
    /** The order. */
    private java.lang.CharSequence order;
    /** The final */
    private java.lang.CharSequence finalString;

    /** Creates a new Builder */
    private Builder() {
      super(SCHEMA$);
    }

    /**
     * Creates a Builder by copying an existing Builder.
     * @param other The existing Builder to copy.
     */
    private Builder(com.mycorp.mynamespace.sampleRecord.Builder other) {
      super(other);
      if (isValidValue(fields()[0], other.orderId)) {
        this.orderId = data().deepCopy(fields()[0].schema(), other.orderId);
        fieldSetFlags()[0] = true;
      }
      if (isValidValue(fields()[1], other.orderTimeAndDate)) {
        this.orderTimeAndDate = data().deepCopy(fields()[1].schema(), other.orderTimeAndDate);
        fieldSetFlags()[1] = true;
      }
      if (isValidValue(fields()[2], other.orderAddress)) {
        this.orderAddress = data().deepCopy(fields()[2].schema(), other.orderAddress);
        fieldSetFlags()[2] = true;
      }
      if (isValidValue(fields()[3], other.orderDetails)) {
        this.orderDetails = data().deepCopy(fields()[3].schema(), other.orderDetails);
        fieldSetFlags()[3] = true;
      }
      if (isValidValue(fields()[4], other.order)) {
        this.order = data().deepCopy(fields()[4].schema(), other.order);
        fieldSetFlags()[4] = true;
      }
      if (isValidValue(fields()[5], other.finalString)) {
        this.finalString = data().deepCopy(fields()[5].schema(), other.finalString);
        fieldSetFlags()[5] = true;
      }
    }

    /**
     * Creates a Builder by copying an existing sampleRecord instance
     * @param other The existing instance to copy.
     */
    private Builder(com.mycorp.mynamespace.sampleRecord other) {
            super(SCHEMA$);
      if (isValidValue(fields()[0], other.orderId)) {
        this.orderId = data().deepCopy(fields()[0].schema(), other.orderId);
        fieldSetFlags()[0] = true;
      }
      if (isValidValue(fields()[1], other.orderTimeAndDate)) {
        this.orderTimeAndDate = data().deepCopy(fields()[1].schema(), other.orderTimeAndDate);
        fieldSetFlags()[1] = true;
      }
      if (isValidValue(fields()[2], other.orderAddress)) {
        this.orderAddress = data().deepCopy(fields()[2].schema(), other.orderAddress);
        fieldSetFlags()[2] = true;
      }
      if (isValidValue(fields()[3], other.orderDetails)) {
        this.orderDetails = data().deepCopy(fields()[3].schema(), other.orderDetails);
        fieldSetFlags()[3] = true;
      }
      if (isValidValue(fields()[4], other.order)) {
        this.order = data().deepCopy(fields()[4].schema(), other.order);
        fieldSetFlags()[4] = true;
      }
      if (isValidValue(fields()[5], other.finalString)) {
        this.finalString = data().deepCopy(fields()[5].schema(), other.finalString);
        fieldSetFlags()[5] = true;
      }
    }

    /**
      * Gets the value of the 'orderId' field.
      * The id of the order.
      * @return The value.
      */
    public java.lang.Integer getOrderId() {
      return orderId;
    }

    /**
      * Sets the value of the 'orderId' field.
      * The id of the order.
      * @param value The value of 'orderId'.
      * @return This builder.
      */
    public com.mycorp.mynamespace.sampleRecord.Builder setOrderId(int value) {
      validate(fields()[0], value);
      this.orderId = value;
      fieldSetFlags()[0] = true;
      return this;
    }

    /**
      * Checks whether the 'orderId' field has been set.
      * The id of the order.
      * @return True if the 'orderId' field has been set, false otherwise.
      */
    public boolean hasOrderId() {
      return fieldSetFlags()[0];
    }


    /**
      * Clears the value of the 'orderId' field.
      * The id of the order.
      * @return This builder.
      */
    public com.mycorp.mynamespace.sampleRecord.Builder clearOrderId() {
      fieldSetFlags()[0] = false;
      return this;
    }

    /**
      * Gets the value of the 'orderTimeAndDate' field.
      * Timestamp of the order.
      * @return The value.
      */
    public java.lang.Integer getOrderTimeAndDate() {
      return orderTimeAndDate;
    }

    /**
      * Sets the value of the 'orderTimeAndDate' field.
      * Timestamp of the order.
      * @param value The value of 'orderTimeAndDate'.
      * @return This builder.
      */
    public com.mycorp.mynamespace.sampleRecord.Builder setOrderTimeAndDate(int value) {
      validate(fields()[1], value);
      this.orderTimeAndDate = value;
      fieldSetFlags()[1] = true;
      return this;
    }

    /**
      * Checks whether the 'orderTimeAndDate' field has been set.
      * Timestamp of the order.
      * @return True if the 'orderTimeAndDate' field has been set, false otherwise.
      */
    public boolean hasOrderTimeAndDate() {
      return fieldSetFlags()[1];
    }


    /**
      * Clears the value of the 'orderTimeAndDate' field.
      * Timestamp of the order.
      * @return This builder.
      */
    public com.mycorp.mynamespace.sampleRecord.Builder clearOrderTimeAndDate() {
      fieldSetFlags()[1] = false;
      return this;
    }

    /**
      * Gets the value of the 'orderAddress' field.
      * The address of the order.
      * @return The value.
      */
    public java.lang.CharSequence getOrderAddress() {
      return orderAddress;
    }

    /**
      * Sets the value of the 'orderAddress' field.
      * The address of the order.
      * @param value The value of 'orderAddress'.
      * @return This builder.
      */
    public com.mycorp.mynamespace.sampleRecord.Builder setOrderAddress(java.lang.CharSequence value) {
      validate(fields()[2], value);
      this.orderAddress = value;
      fieldSetFlags()[2] = true;
      return this;
    }

    /**
      * Checks whether the 'orderAddress' field has been set.
      * The address of the order.
      * @return True if the 'orderAddress' field has been set, false otherwise.
      */
    public boolean hasOrderAddress() {
      return fieldSetFlags()[2];
    }


    /**
      * Clears the value of the 'orderAddress' field.
      * The address of the order.
      * @return This builder.
      */
    public com.mycorp.mynamespace.sampleRecord.Builder clearOrderAddress() {
      orderAddress = null;
      fieldSetFlags()[2] = false;
      return this;
    }

    /**
      * Gets the value of the 'orderDetails' field.
      * The Description of the order.
      * @return The value.
      */
    public java.lang.CharSequence getOrderDetails() {
      return orderDetails;
    }

    /**
      * Sets the value of the 'orderDetails' field.
      * The Description of the order.
      * @param value The value of 'orderDetails'.
      * @return This builder.
      */
    public com.mycorp.mynamespace.sampleRecord.Builder setOrderDetails(java.lang.CharSequence value) {
      validate(fields()[3], value);
      this.orderDetails = value;
      fieldSetFlags()[3] = true;
      return this;
    }

    /**
      * Checks whether the 'orderDetails' field has been set.
      * The Description of the order.
      * @return True if the 'orderDetails' field has been set, false otherwise.
      */
    public boolean hasOrderDetails() {
      return fieldSetFlags()[3];
    }


    /**
      * Clears the value of the 'orderDetails' field.
      * The Description of the order.
      * @return This builder.
      */
    public com.mycorp.mynamespace.sampleRecord.Builder clearOrderDetails() {
      orderDetails = null;
      fieldSetFlags()[3] = false;
      return this;
    }

    /**
      * Gets the value of the 'order' field.
      * The order.
      * @return The value.
      */
    public java.lang.CharSequence getOrder() {
      return order;
    }

    /**
      * Sets the value of the 'order' field.
      * The order.
      * @param value The value of 'order'.
      * @return This builder.
      */
    public com.mycorp.mynamespace.sampleRecord.Builder setOrder(java.lang.CharSequence value) {
      validate(fields()[4], value);
      this.order = value;
      fieldSetFlags()[4] = true;
      return this;
    }

    /**
      * Checks whether the 'order' field has been set.
      * The order.
      * @return True if the 'order' field has been set, false otherwise.
      */
    public boolean hasOrder() {
      return fieldSetFlags()[4];
    }


    /**
      * Clears the value of the 'order' field.
      * The order.
      * @return This builder.
      */
    public com.mycorp.mynamespace.sampleRecord.Builder clearOrder() {
      order = null;
      fieldSetFlags()[4] = false;
      return this;
    }

    /**
      * Gets the value of the 'finalString' field.
      * The final
      * @return The value.
      */
    public java.lang.CharSequence getFinalString() {
      return finalString;
    }

    /**
      * Sets the value of the 'finalString' field.
      * The final
      * @param value The value of 'finalString'.
      * @return This builder.
      */
    public com.mycorp.mynamespace.sampleRecord.Builder setFinalString(java.lang.CharSequence value) {
      validate(fields()[5], value);
      this.finalString = value;
      fieldSetFlags()[5] = true;
      return this;
    }

    /**
      * Checks whether the 'finalString' field has been set.
      * The final
      * @return True if the 'finalString' field has been set, false otherwise.
      */
    public boolean hasFinalString() {
      return fieldSetFlags()[5];
    }


    /**
      * Clears the value of the 'finalString' field.
      * The final
      * @return This builder.
      */
    public com.mycorp.mynamespace.sampleRecord.Builder clearFinalString() {
      finalString = null;
      fieldSetFlags()[5] = false;
      return this;
    }

    @Override
    @SuppressWarnings("unchecked")
    public sampleRecord build() {
      try {
        sampleRecord record = new sampleRecord();
        record.orderId = fieldSetFlags()[0] ? this.orderId : (java.lang.Integer) defaultValue(fields()[0]);
        record.orderTimeAndDate = fieldSetFlags()[1] ? this.orderTimeAndDate : (java.lang.Integer) defaultValue(fields()[1]);
        record.orderAddress = fieldSetFlags()[2] ? this.orderAddress : (java.lang.CharSequence) defaultValue(fields()[2]);
        record.orderDetails = fieldSetFlags()[3] ? this.orderDetails : (java.lang.CharSequence) defaultValue(fields()[3]);
        record.order = fieldSetFlags()[4] ? this.order : (java.lang.CharSequence) defaultValue(fields()[4]);
        record.finalString = fieldSetFlags()[5] ? this.finalString : (java.lang.CharSequence) defaultValue(fields()[5]);
        return record;
      } catch (java.lang.Exception e) {
        throw new org.apache.avro.AvroRuntimeException(e);
      }
    }
  }

  @SuppressWarnings("unchecked")
  private static final org.apache.avro.io.DatumWriter<sampleRecord>
    WRITER$ = (org.apache.avro.io.DatumWriter<sampleRecord>)MODEL$.createDatumWriter(SCHEMA$);

  @Override public void writeExternal(java.io.ObjectOutput out)
    throws java.io.IOException {
    WRITER$.write(this, SpecificData.getEncoder(out));
  }

  @SuppressWarnings("unchecked")
  private static final org.apache.avro.io.DatumReader<sampleRecord>
    READER$ = (org.apache.avro.io.DatumReader<sampleRecord>)MODEL$.createDatumReader(SCHEMA$);

  @Override public void readExternal(java.io.ObjectInput in)
    throws java.io.IOException {
    READER$.read(this, SpecificData.getDecoder(in));
  }

}
